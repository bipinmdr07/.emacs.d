#+TITLE: GNU Emacs Configuration
#+AUTHOR: Bipin Manandhar
#+DESCRIPTION: Bipin's personal Emacs configuration.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Fix gcc error
#+begin_src emacs-lisp
;; Ensure exec-path-from-shell is installed and initialized early for native compilation
(elpaca exec-path-from-shell
  (use-package exec-path-from-shell
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-copy-envs
       '("PATH" "LIBRARY_PATH" "CPATH" "PKG_CONFIG_PATH")))))
#+end_src

** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  ;; (use-package all-the-icons
  ;;   :ensure t
  ;;   :if (display-graphic-p))

  ;; (use-package all-the-icons-dired
  ;;   :ensure t
  ;;   :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

** BACKUP
By default, Emacs creates automatic backups of file in their original directories, such =file.el= and the backup =file.el~=. This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =Trash= directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
    :ensure t
  :demand t
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1)) ;; Globally enabling evil mode


  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (setq evilcollection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

** Buffer move
#+begin_src emacs-lisp
  (use-package buffer-move
    :ensure t
    :commands (buf-move-left buf-move-down buf-move-up buf-move-right))
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda itema and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Welcome back Bipin, Happy Coding!!")
    (setq dashboard-startup-banner 'logo)
    ;; (setq dashboard-startup-banner "<path-to-png-file>") ;; use custom image as banner
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
  			  (agenda . 5)
  			  (bookmarks . 3)
  			  (projects . 3)
  			  (registers . 3)))
    (setq dashboard-items-shortcuts '((recents . "r")
  				    (agenda . "a")
  				    (bookmarks . "b")
  				    (projects . "p")
  				    (registers . "e")))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
  				    (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* FONTS
Defining the variaous fonts that Emacs will use.

** Setting the font face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Source Code Pro"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* ORG MODE
** Enable Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package org-bullets
      :ensure t
      :hook (org-mode . org-bullets-mode))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled. Org-temp allows for '<s' followed by TAB to expand to a begin_src tag. Other expansion available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* GIT PROGRAMS
** Git Time Machine
git-timemachine is a program that allows you to move backwards and forwards through a file's commits. =SPC g t= will open the time machine on a file if it is in a git repo. Then, while in normal mode, you can use =CTRL-k= to move backwards and forwards through the commits.

#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t
    :after git-timemachine
    :hook (evil-normalize-keymap . git-timemachine-hook)
    :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src

** Magit
Magit is full feature git client for Emacs.

#+begin_src emacs-lisp
  (use-package transient
    :ensure t
    :demand t) ; Forces the external package to load immediately

  (use-package magit :ensure t)
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighers) of minor-modes. With this package installed, you can add =:diminish= to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

* IVY (COUNSEL)
- Ivy, a generic completion mechanism for Emacs.
- Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
- Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :diminish
    :config
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

  (use-package ivy
    :ensure t
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full)
    (ivy-rich-switch-buffer-align-virtual-buffer t)
    (ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
  			       'ivy-rich-switch-buffer-transformer))

  ;; (use-package all-the-icons-ivy-rich
  ;;   :ensure t
  ;;   :init (all-the-icons-ivy-rich-mode 1))

#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defer 2
    :diminish
    :custom
    (company-begin-command '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
 :ensure t
    :after company
    :diminish
    :hook (company-mode . company-box-mode))

#+end_src

* DIRED
#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :config
    (setq dired-open-extensions '(("gif" . "sxiv")
  				  ("jpg" . "sxiv")
  				  ("png" . "sxiv")
  				  ("mkv" . "mpv")
  				  ("mp4" . "mpv"))))

  (use-package peep-dired
    :ensure t
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map (kdb "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

#+end_src

* GENERAL KEYBINDINGS
#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)

    ;; setup 'SPC' as the global leader key
    (general-create-definer bipin/leader-keys
  			  :states '(normal insert visual emacs)
  			  :keymaps 'override
  			  :prefix "SPC" ;; set leader
  			  :global-prefix "C-SPC") ;; access leader in insert mode

    (bipin/leader-keys
     "." '(find-file :wk "Find file")
     "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
     "/" '(comment-line :wk "Comment lines")
     "u" '(universal-argument :wk "Universal argument"))

    (bipin/leader-keys
      "b" '(:ignore t :wk "Bookmarks/Buffers")
      "b b" '(switch-to-buffer :wk "Switch to buffer")
      "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
      "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
      "b d" '(bookmark-delete :wk "Delete bookmark")
      "b i" '(ibuffer :wk "Ibuffer")
      "b k" '(kill-current-buffer :wk "Kill current buffer")
      "b K" '(kill-some-buffers :wk "Kill multiple buffers")
      "b l" '(list-bookmarks :wk "List bookmarks")
      "b m" '(bookmarks-set :wk "Set bookmark")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer")
      "b R" '(rename-buffer :wk "Rename buffer")
      "b s" '(basic-save-buffer :wk "Save buffer")
      "b S" '(save-some-buffers :wk "Save multiple buffers")
      "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

    (bipin/leader-keys
      "f" '(:ignore t :wk "Files")
      "f c" '((lambda () (interactive)
  	      (find-file "~/.emacs.d/config.org"))
  	    :wk "Open emacs config.org")
      "f i" '((lambda () (interactive)
  	      (find-fie "~/.emacs.d/init.el"))
  	    :wk "Open emacs init.el"))

    (bipin/leader-keys
      "g" '(:ignore t :wk "Git")
      "g F" '(magit-fetch :wk "Git fetch")
      "g g" '(magit-status :wk "Magit status")
      "g i" '(magit-init :wk "Initialize git repo")
      "g l" '(magit-log-buffer-file :wk "Magit buffer log")
      "g s" '(magit-stage-buffer-file :wk "Git stage current file")
      "g t" '(git-timemachine :wk "Git time machine")
      "g u" '(magit-stage-buffer-file :wk "Git unstage current file"))

    (bipin/leader-keys
      "h" '(:ignore t :wk "Help")
      "h b" '(describe-bindings :wk "Describe bindings")
      "h c" '(describe-char :wk "Describe character under corsor")
      "h d" '(:ignore t :wk "Emacs documentation")
      "h d a" '(about-emacs :wk "About Emacs")
      "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
      "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
      "h d m" '(info-emacs-manual :wk "The Emacs manual")
      "h d n" '(view-emacs-news :wk "View Emacs news")
      "h d o" '(describe-distribution :wk "How to obtain Emacs")
      "h d p" '(view-emacs-problems :wk "View Emacs problems")
      "h d t" '(view-emacs-todo :wk "View Emacs todo")
      "h d w" '(describe-no-warranty :wk "Describe no warranty")
      "h e" '(view-echo-area-messages :wk "View echo area messages")
      "h f" '(describe-function :wk "Describe function")
      "h F" '(describe-face :wk "Describe face")
      "h g" '(describe-gnu-project :wk "Describe GNU Project")
      "h i" '(info :wk "Info")
      "h I" '(describe-input-method :wk "Describe input method")
      "h k" '(describe-key :wk "Describe key")
      "h l" '(view-lossage :wk "Display recent keystroke and the commands run")
      "h L" '(describe-language-environment :wk "Describe language environment")
      "h m" '(describe-mode :wk "Describe mode")
      "h r" '(:ignore t :wk "Reload")
      "h r r" '((lambda () (interactive)
  		(load-file "~/.emacs.d/init.el")
  		(ignore (elpaca-process-queues)))
  	      :wk "Reload emacs config")
      "h t" '(load-theme :wk "Load theme")
      "h v" '(describe-variable :wk "Describe variable")
      "h w" '(where-is :wk "Prints keybinding for command if set")
      "h x" '(describe-command :wk "Display full documentation for command"))

    (bipin/leader-keys
      "n" '(:ignore t :wk "Org")
      "n a" '(org-agenda :wk "Org agenda")
      "n e" '(org-export-dispatch :wk "Org export dispatch")
      "n i" '(org-toggle-item :wk "Org toggle item")
      "n t" '(org-todo :wk "Org todo")
      "n T" '(org-todo-list :wk "Org todo list"))

    (bipin/leader-keys
      "m" '(:ignore t :wk "Org more")
      "m b" '(:ignore t :wk "Tables")
      "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

    (bipin/leader-keys
      "m d" '(:ignore t :wk "Date/deadline")
      "m d t" '(org-time-stamp :wk "Org time stamp"))

    (bipin/leader-keys
      "o" '(:ignore t :wk "Open")
      "o d" '(dashboard-open :wk "Dashboard")
      "o f" '(make-frame :wk "Open buffer in new frame")
      "o F" '(select-frame-by-name :wk "Select frame by name"))

    (bipin/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t o" '(org-mode :wk "Toggle org mode")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (bipin/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w c" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))

    )
#+end_src

* THEME
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :custom
    ;; Global settings (defaults)
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    ;; for treemacs users
    (doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    :config
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src



* WHICH KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src
