#+TITLE: GNU Emacs Configuration
#+AUTHOR: Bipin Manandhar
#+DESCRIPTION: Bipin's personal Emacs configuration.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Fix gcc error
#+begin_src emacs-lisp
;; Ensure exec-path-from-shell is installed and initialized early for native compilation
(elpaca exec-path-from-shell
  (use-package exec-path-from-shell
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-copy-envs
       '("PATH" "LIBRARY_PATH" "CPATH" "PKG_CONFIG_PATH")))))
#+end_src

** BACKUP
By default, Emacs creates automatic backups of file in their original directories, such =file.el= and the backup =file.el~=. This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =Trash= directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;;When installing a package used in the init file itself,
;;e.g. a package which adds a use-package key word,
;;use the :wait recipe keyword to block until that package is installed/configured.
;;For example:
;;(use-package general :ensure (:wait t) :demand t)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
  :ensure t
  :demand t
  :init
  (setq evil-want-integration t
	evil-want-keybinding nil)
  :config
  (evil-mode 1)) ;; Globally enabling evil mode


(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evilcollection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))

;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause evaluate the declaration immediately. It is not deferred.
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

(use-package evil-surround
  :ensure t
  :after evil
  :config
  (global-evil-surround-mode 1)
  )
#+end_src

** Restart Emacs
Package to add capability to restart emacs with keybinding.
#+begin_src emacs-lisp
(use-package restart-emacs :ensure t)
#+end_src
** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src


** Buffer move
#+begin_src emacs-lisp
  (use-package buffer-move
    :ensure t
    :commands (buf-move-left buf-move-down buf-move-up buf-move-right))
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda itema and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Welcome back Bipin, Happy Coding!!")
    (setq dashboard-startup-banner 'logo)
    ;; (setq dashboard-startup-banner "<path-to-png-file>") ;; use custom image as banner
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
  			  (agenda . 5)
  			  (bookmarks . 3)
  			  (projects . 3)
  			  (registers . 3)))
    (setq dashboard-items-shortcuts '((recents . "r")
  				    (agenda . "a")
  				    (bookmarks . "b")
  				    (projects . "p")
  				    (registers . "e")))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
  				    (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* FONTS
Defining the variaous fonts that Emacs will use.

** Setting the font face
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Source Code Pro"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-14"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)
#+end_src

* ORG MODE
** Enable Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t
    :hook (org-mode . toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package org-bullets
      :ensure t
      :hook (org-mode . org-bullets-mode))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled. Org-temp allows for '<s' followed by TAB to expand to a begin_src tag. Other expansion available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Deft
Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity.

#+begin_src emacs-lisp
(use-package deft
  :ensure t
  :diminish
  :init
  (setq deft-recursive t
	deft-width-offset 50)
  (setq-local truncate-lines t)
  :config
  (setq deft-directory "~/Sync/org"
                deft-extensions '("txt" "org")
		deft-ignore-file-regexp
		"\\.sync-conflict-.*\\.org\\'"
		)
  :hook (deft-mode . (lambda ()
		       "Custom settings for the deft-mode buffer"
		       (visual-line-mode -1)
		       (setq-local truncate-lines t)))
)
#+end_src

** Org mode scripts
*** Insert new heading with checkbox if current line has one.
#+begin_src emacs-lisp
(defun bipin/org-insert-heading-with-checkbox ()
  "Insert new heading with checkbox if current line has one."
  (interactive)
  (let* ((current-line (thing-at-point 'line t))
	 (has-checkbox (and current-line
			 (string-match-p "\\[[- X]\\]" current-line))))
    (if has-checkbox
	(progn
	  (org-insert-heading)
	  (insert "[ ] "))
      (org-insert-heading)))) ;; fallback to default behaviour

  (define-key org-mode-map (kbd "C-<return>") #'bipin/org-insert-heading-with-checkbox)
#+end_src

*** Auto clock in on changeing task status to inprogress
#+begin_src emacs-lisp
(defun org-clock-todo-change ()
  (if (string= org-state "[-]")
      (org-clock-in)
    (org-clock-out-if-current)))

(add-hook 'org-after-todo-state-change-hook #'org-clock-todo-change)
#+end_src

* GIT PROGRAMS
** Git Time Machine
git-timemachine is a program that allows you to move backwards and forwards through a file's commits. =SPC g t= will open the time machine on a file if it is in a git repo. Then, while in normal mode, you can use =CTRL-k= to move backwards and forwards through the commits.

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :after git-timemachine
  :hook (evil-normalize-keymap . git-timemachine-hook)
  :config
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
  (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))

#+end_src

** Magit
Magit is full feature git client for Emacs.

#+begin_src emacs-lisp
  (use-package transient
    :ensure t
    :demand t) ; Forces the external package to load immediately

  (use-package magit
    :ensure t
    :config
    (add-hook 'git-commit-setup-hook #'evil-insert-state))
#+end_src

** Custom Scripts
*** Add current branch name to commit.
#+begin_src emacs-lisp
(defun bipin/add-branch-name-to-commit-message ()
  "Prepare the current branch name to the commit message, unless it's a common env branch."
  (let* ((branch (magit-get-current-branch))
	 (excluded-branches '("dev" "qa" "staging" "preprod" "master" "prod" "main")))
    (unless (member branch excluded-branches)
      (insert (concat branch ": ")))))

(add-hook 'git-commit-setup-hook #'bipin/add-branch-name-to-commit-message)
#+end_src

*** Accepting the both changes from the buffer A and B in ediff.
#+begin_src emacs-lisp
(defun bipin/ediff-copy-both-to-C ()
  "Copy both A and B variants into buffer C at the current difference."
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
		   (concat
		    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
		    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))

(add-hook 'ediff-keymap-setup-hook
	  (lambda ()
	    (define-key ediff-mode-map (kbd "B") #'bipin/ediff-copy-both-to-C)))
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighers) of minor-modes. With this package installed, you can add =:diminish= to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

* IVY (COUNSEL)
- Ivy, a generic completion mechanism for Emacs.
- Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
- Ivy-rich allows us to add descriptions alongside the commands in M-x.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :diminish
    :config
    (counsel-mode)
    (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

  (use-package ivy
    :ensure t
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full)
    (ivy-rich-switch-buffer-align-virtual-buffer t)
    (ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
  			       'ivy-rich-switch-buffer-transformer))

  ;; (use-package all-the-icons-ivy-rich
  ;;   :ensure t
  ;;   :init (all-the-icons-ivy-rich-mode 1))

#+end_src

* LANGUAGE Support
Emacs has built-in programming language modes for Lisp, ...

** Languages
#+begin_src emacs-lisp
;; LSP Core
(use-package lsp-mode
  :ensure t
  :init
  (setq lsp-auto-guess-root t
	lsp-prefer-flymake nil)
  :custom
  (lsp-completion-provider :capf)
  (lsp-enable-snippet t))

;; LSP UI, for hover/doc/popups
(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode))

(use-package go-mode
  :ensure t
  :hook (go-mode . lsp-deferred))

;; (use-package web-mode
;;   :ensure t
;;   :hook (web-hook . lsp-deferred)
;; )
#+end_src

* COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :defer 2
  :diminish
  :custom
  (company-begin-command '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :ensure t
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* DIRED
#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :config
    (setq dired-open-extensions '(("gif" . "sxiv")
  				  ("jpg" . "sxiv")
  				  ("png" . "sxiv")
  				  ("mkv" . "mpv")
  				  ("mp4" . "mpv"))))

  (use-package peep-dired
    :ensure t
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map (kdb "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

#+end_src

* HIGHLIGHT TODO
Adding highlight to TODO and related words.

#+begin_src emacs-lisp
  (use-package hl-todo
    :ensure t
    :hook ((org-mode . hl-todo-mode)
  	 (prog-mode . hl-todo-mode))
    :config
    (setq hl-todo-highlight-punctuation ":"
  	hl-todo-keyword-faces
  	`(("TODO" warning bold)
  	  ("FIXME" error bold)
  	  ("HACK" font-lock-constant-face-bold)
  	  ("REVIEW" font-lock-keyword-face bold)
  	  ("NOTE" success bold)
  	  ("DEPRECATED" font-lock-doc-face bold))))

#+end_src

* MINIBUFFER ESCAPE
By default, Emacs require you to hit ESC three times to escape quit the minibuffer.

#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)

#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows. While you can create your own custom modeline, why go the trouble when Doom Emacs already has a nice modeline package available. For more information on what is available to configure in the Doom modeline checkout: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]].

#+begin_src emacs-lisp
  ;; Explicit recipe to tell Elpaca how to install doom-modeline
  (elpaca (doom-modeline :host github :repo "doomemacs/doom-modeline"))

  (elpaca-wait)

  ;; Load and configure doom-modeline manually
  (require 'doom-modeline)

  ;; Enable the modeline
  (doom-modeline-mode 1)

  ;; Customize settings
  (setq doom-modeline-height 35
        doom-modeline-bar-width 5
        doom-modeline-persp-name t
        doom-modeline-persp-icon t)
#+end_src

* RAINBOW DELIMITERS
Adding rainbow coloring to parenthesis

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
  	 (clojure-mode . rainbow-delimiters-mode)
  	 (prog-mode . rainbow-delimiters-mode)))
#+end_src

* RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff). The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode.

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :defer t
    :diminish
    :hook org-mode prog-mode)
#+end_src

* PERSPECTIVE
[[https://github.com/nex3/perspective-el][Perspective]] provides multiple named workspaces (or "perspectives") in Emacs, similar to multiple desktops in window managers. Each perspective has its own buffer list and its own window layout, along with some other isolated niceties, like the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]] ring.

#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :init
    (persp-mode)
    :config
    ;; Sets a file to write to when we save states
    (setq persp-state-default-file "~/.emacs.d/sessions"))

  ;; This will group buffers by persp-name in ibuffer.
  (add-hook 'ibuffer-hook
  	  (lambda ()
  	    (persp-ibuffer-set-filter-groups)
  	    (unless (eq ibuffer-sorting-mode 'alphabetic)
  	      (ibuffer-do-sort-by-alphabetic))))

  ;; Automatically save perspective states to file when Emacs exists.
  (add-hook 'kill-emacs-hook #'persp-state-save)
#+end_src

* PROJECTILE
[[https://github.com/bbatsov/projectile][Projectile]] is a project interactive library for Emacs. Avoid =fish shell= to avoid any issue.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :demand t
    :config
    (projectile-mode 1)
    )

#+end_src

* TREEMACS
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a file and project explorer package for Emacs, providing a tree-style view of project files and directories for easy navigation and management. It features integrations with version control like Git and project managers such as Projectile, offers visual feedback on file status, and supports features like follow mode to highlight the current file, session persistence, bookmarks and a mouse interface.

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-buffer-name-function            #'treemacs-default-buffer-name
            treemacs-buffer-name-prefix              " *Treemacs-Buffer-"
            treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-files-by-mouse-dragging    t
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil)
        (treemacs-start-on-boot)
      )
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  ;; (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  ;;   :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  ;;   :ensure t
  ;;   :config (treemacs-set-scope-type 'Perspectives))

   (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+end_src

* FLYCHECK
Flycheck checks the syntax and lint issue on the fly for the current file. For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src emacs-lisp
(defun bipin/flycheck-set-temp-dir ()
  "Create and set the Emacs temporary directory for Flycheck."
  (let ((tmp-dir (expand-file-name "tmp/flycheck/" user-emacs-directory)))
    (unless (file-directory-p tmp-dir)
      (make-directory tmp-dir t))
    (setq temporary-file-directory tmp-dir)))

(defun bipin/flycheck-cleanup-temp-file ()
  "Delete Flycheck's temporary file when killing a buffer."
  (when (fboundp 'flycheck-delete-temp-file)
    (flycheck-delete-temp-file)))

(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init
  ;; Set up temporary directory before enabling flycheck
  (bipin/flycheck-set-temp-dir)
  (global-flycheck-mode)
  :config
  ;; Clean up temp files when buffer is killed
  (add-hook 'kill-buffer-hook #'bipin/flycheck-cleanup-temp-file)
  (add-hook 'kill-emacs-hook
          (lambda ()
            (delete-directory (expand-file-name "tmp/flycheck/" user-emacs-directory)
                              t)))  ;; t = recursive delete
)

#+end_src

* GENERAL KEYBINDINGS
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :after evil
  :config
  (general-evil-setup)

  ;; setup 'SPC' as the global leader key
  (general-create-definer bipin/leader-keys
			  :states '(normal insert visual emacs)
			  :keymaps 'override
			  :prefix "SPC" ;; set leader
			  :global-prefix "C-SPC") ;; access leader in insert mode

  (bipin/leader-keys
   "." '(find-file :wk "Find file")
   ":" '(execute-extended-command :wk "M-x:")
   "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
   "/" '(comment-line :wk "Comment lines")
   "u" '(universal-argument :wk "Universal argument"))

  (bipin/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmarks-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (bipin/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d p" '(peep-dired :wk "Peep-dired"))

  (bipin/leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
	      (find-file "~/.emacs.d/config.org"))
	    :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
	      (dired "~/.emacs.d/"))
	    :wk "Open use-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
	      (find-file "~/.emacs.d/init.el"))
	    :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f r" '(counsel-recentf :wk "Find recent files")
    )

  (bipin/leader-keys
    "g" '(:ignore t :wk "Git")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g s" '(magit-stage-buffer-file :wk "Git stage current file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-buffer-file :wk "Git unstage current file"))

  (bipin/leader-keys
    "h" '(:ignore t :wk "Help")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under corsor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystroke and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
		(load-file "~/.emacs.d/init.el")
		(ignore (elpaca-process-queues)))
	      :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (bipin/leader-keys
    "n" '(:ignore t :wk "Org")
    "n a" '(org-agenda :wk "Org agenda")
    "n d" '(deft :wk "Deft")
    "n e" '(org-export-dispatch :wk "Org export dispatch")
    "n i" '(org-toggle-item :wk "Org toggle item")
    "n t" '(org-todo :wk "Org todo")
    "n T" '(org-todo-list :wk "Org todo list"))

  (bipin/leader-keys
    "m" '(:ignore t :wk "Org more")
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table")
    "m b t" '(org-table-create :wk "Create table")
    "m b r" '(org-table-recalculate :wk "Recalculate table"))

  (bipin/leader-keys
    "m c" '(:ignore t :wk "Clock")
    "m c i" '(org-clock-in :wk "Clock in")
    "m c o" '(org-clock-out :wk "Clock out")
    "m c g" '(org-clock-goto :wk "Goto current clock")
    "m c r" '(org-clock-report :wk "Clock report")
    "m c d" '(org-clock-display :wk "Display clock times")
    "m c C" '(org-clock-cancel :wk "Cancel clock"))

  ;; Schedule / Deadlines / Timestamps
  (bipin/leader-keys
    "m d" '(:ignore t :wk "Dates / Schedules")
    "m d d" '(org-deadline :wk "Set deadline")
    "m d s" '(org-schedule :wk "Schedule task")
    "m d t" '(org-time-stamp :wk "Insert timestamp")
    "m d T" '(org-time-stamp-inactive :wk "Insert inactive timestamp"))

  (bipin/leader-keys
    "m i" '(:ignore t :wk "Insert")
    "m i l" '(org-insert-link :wk "Insert link")
    "m i d" '(org-insert-drawer :wk "Insert drawer")
    "m i s" '(org-insert-structure-template :wk "Insert structure"))

  (bipin/leader-keys
    "m r" '(:ignore t :wk "Refile/archive")
    "m r r" '(org-refile :wk "Refile")
    "m r a" '(org-archive-subtree :wk "Archive subtree"))

  (bipin/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o F" '(select-frame-by-name :wk "Select frame by name")
    "o p" '(treemacs :wk "toggle treemacs")
    "o t" '(shell-pop :wk "toggle terminal"))

  (bipin/leader-keys
    "p" '(:keymap projectile-command-map :package projectile :wk "Projectile"))
  
  (bipin/leader-keys
    "q" '(:ignore t :wk "Quit")
    "q q" '((lambda ()
	    "Save all buffers and quite Emacs."
	      (interactive)
	      (save-buffers-kill-emacs))
	    :wk "Quit emacs")
    "q Q" '((lambda ()
	      "Quit emacs qithout saving anything"
	      (interactive)
	      (kill-emacs))
	    :wk "Quit emacs without saving")
    "q r" '(restart-emacs :wk "Restart emacs"))

  (bipin/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

  (bipin/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

  )
#+end_src

* SMART PARENS
#+begin_src emacs-lisp
(use-package smartparens
:ensure t
:init
(smartparens-global-mode 1))
#+end_src

* REDO TREE
#+begin_src emacs-lisp
(use-package undo-tree
:ensure t
:after evil
:diminish
:config
;; tell evil-mode to use undo-tree for undo/redo
(evil-set-undo-system 'undo-tree)

;; Activate the undo-tree minor mode globally
(global-undo-tree-mode 1))

;; move all undo history to separate location.
(setq undo-tree-history-directory-alist
      `(("." . ,(expand-file-name "undo-tree-history/" user-emacs-directory)))
      undo-tree-auto-save-history t)

#+end_src

* DEFAULTS
The following setting are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src emacs-lisp
(delete-selection-mode 1) ;; You can select text and delete it by typing.
(electric-indent-mode -1) ;; Turn off the weird indentation that Emacs does by default.

(global-auto-revert-mode t) ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t) ;; Enable truncated lines
(menu-bar-mode -1) ;; Disable the menu bar
(scroll-bar-mode -1) ;; Disable the scroll bar
(tool-bar-mode -1) ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src bloc automatic indent to 0 instead of 2.

;; set relaive line numbers globally
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode t)

(setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS(i)" "|" "DONE(d)" "CANCELED(c)")
	(sequence "[ ](T)" "[-](I)" "|" "[X](D)")))
(setq org-agenda-files '("~/Sync/org/todo.org"))
(setq org-insert-heading-respect-content t)
#+end_src

* SHELLS AND TERMINALS

#+begin_src emacs-lisp
(use-package shell-pop
  :ensure t
  :hook ((shell-mode . (lambda () (company-mode -1))))
  :config
  (setq shell-pop-mode +1
	shell-pop-term-shell "/bin/zsh"
	shell-pop-full-span t
	shell-pop-window-position "bottom"
	shell-pop-autocd-to-working-dir t
	shell-pop-restore-window-configuration t
	shell-pop-cleanup-buffer-at-process-exit t)
)
#+end_src

* SNIPPETS
** YASnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :hook ((prog-mode . yas-minor-mode)
	 (org-mode . yas-minor-mode))
  :config
  (setq yas-snippet-directly
	'("~/.emacs.d/snippets" ;; custom snippets location
	  "~/.emacs.d/elpaca/repos/doom-snippets"))
  (yas-reload-all)
)
#+end_src

** Doom snippets
#+begin_src emacs-lisp
;; This will clone the package inside elpaca/repos/doom-snippets
(elpaca (doom-snippets :host github :repo "doomemacs/snippets" :depends (yasnippet)))
(elpaca-wait)
#+end_src

* EDITOR
** Indent Guide
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character ;; or 'character 'fill, or bitmap'
	highlight-indent-guides-character ?\│ ; nice Unicode vertical bar
	highlight-indent-guides-auto-enabled t
	highlight-indent-guides-auto-odd-face-perc 25
	highlight-indent-guides-auto-even-face-perc 25
	highlight-indent-guides-auto-character-face-perc 50))
#+end_src

** Editor config
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

** Format all
#+begin_src emacs-lisp
(use-package format-all
  :ensure t
  :hook (prog-mode . (lambda()
			(format-all-ensure-formatter)
			(add-hook 'before-save-hook #'format-all-buffer nil t)))
  :config
  (setq format-all-default-formatters
	'(("Python" black)
	  ("JavaScript" prettier)
	  ("JSON" prettier)
	  ("Go" gofmt))))

#+end_src

** Evil Multiedit
#+begin_src emacs-lisp
(use-package evil-multiedit
  :ensure t
  :after evil
  :config
  (evil-multiedit-default-keybinds))
#+end_src

** VC Fringe
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :init
  (global-diff-hl-mode)
  :hook ((prog-mode . diff-hl-mode)
         (dired-mode . diff-hl-dired-mode)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :config
  (diff-hl-flydiff-mode))
#+end_src

* THEME
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :custom
    ;; Global > settings (defaults)
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    ;; for treemacs users
    (doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    :config
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* WHICH KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src
